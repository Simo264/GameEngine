#pragma once

#include "Core/Core.hpp"
#include "Core/Log/Logger.hpp"
#include <entt/entt.hpp> 

/**
 * @brief
 * GameObject is an identifier that represents an object in the game world.
 * It does not contain data per se, but acts as a "container" with wich components are associated.
 * The entity has no behaviour or state without components associated with it.
 */
class GameObject
{
public:
	GameObject(entt::entity id = entt::null, entt::registry* reg = nullptr) : 
		id{ id },
		reg{ reg }
	{}

	template<typename T, typename...Args>
	T& AddComponent(Args&&... args)
	{
		if (GetComponent<T>())
			CONSOLE_WARN("Object already has component!");
		
		return reg->emplace_or_replace<T>(id, std::forward<Args>(args)...);
	}

	template<typename T>
	T* GetComponent()
	{
		return reg->try_get<T>(id);
	}

	template<typename T>
	void RemoveComponent()
	{
		if (!HasComponent<T>())
		{
			CONSOLE_WARN("Object does not have component!");
			return;
		}

		reg->remove<T>(id);
	}

	template<typename T>
	bool HasComponent()
	{
		return reg->any_of<T>(id);
	}

	bool IsValid() const
	{
		return (reg && reg->valid(id));
	}

	bool Compare(const GameObject& other) const
	{
		return id == other.id;
	}

	entt::entity id;			// In Entt an entity is simply an ID generated by the register 
	entt::registry* reg;	// The register
};
